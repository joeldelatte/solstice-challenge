{"ast":null,"code":"var _jsxFileName = \"/Users/joeldelatte/portfolioProjects/solsticeAssessment/solstice/client/src/components/Dashboard/CustomerAccounts.js\";\nimport React, { useContext, useState, useEffect, useLayoutEffect } from \"react\";\nimport http from \"../../utils/http-common\";\nimport Account from \"../Main/Accounts/Account\";\nimport { CustomerContext } from \"../../utils/CustomerContext\";\nimport \"../Main/main.css\";\n\nconst CustomerAccounts = () => {\n  const {\n    globalCustomer\n  } = useContext(CustomerContext);\n  const [accounts, setAccounts] = useState(null);\n  const [customerID, setCustomerID] = useState();\n  const [noAccounts, setNoAccounts] = useState(true);\n\n  function getAllAccounts() {\n    http.get(\"/accounts\").then(function (response) {\n      let data = response.data.accounts.filter(element => {\n        if (element.customer_id == customerID) {\n          return element;\n        }\n      });\n      console.log(data);\n      setAccounts(data);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }\n\n  const renderAccounts = () => {\n    if (noAccounts) {\n      return /*#__PURE__*/React.createElement(Account, {\n        customer_id: \"0\",\n        address: \"address\",\n        city: \"city\",\n        state: \"state\",\n        zip_code: \"zip code\",\n        solar_farm_id: \"solar farm id\",\n        capacity_share: \"capacity share\",\n        created_date: \"created date\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 16\n        }\n      });\n    } else {\n      return accounts && accounts.map((account, index) => {\n        return /*#__PURE__*/React.createElement(Account, {\n          key: index,\n          customer_id: account.customer_id,\n          address: account.address,\n          city: account.city,\n          state: account.state,\n          zip_code: account.zip_code,\n          solar_farm_id: account.solar_farm_id,\n          capacity_share: account.capacity_share,\n          created_date: account.created_date,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    globalCustomer && setCustomerID(globalCustomer.id);\n    console.log(customerID);\n  }, [globalCustomer, customerID]);\n  useLayoutEffect(() => {\n    setTimeout(() => {\n      getAllAccounts();\n    }, 550);\n  }, [globalCustomer, customerID]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, \"Customer's Accounts:\"), /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, \"Customer ID\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, \"Address\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, \"City\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, \"State\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, \"Zip Code\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, \"Solar Farm ID\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, \"Capacity Share\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, \"Created On\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, renderAccounts()))));\n};\n\nexport default CustomerAccounts;","map":{"version":3,"sources":["/Users/joeldelatte/portfolioProjects/solsticeAssessment/solstice/client/src/components/Dashboard/CustomerAccounts.js"],"names":["React","useContext","useState","useEffect","useLayoutEffect","http","Account","CustomerContext","CustomerAccounts","globalCustomer","accounts","setAccounts","customerID","setCustomerID","noAccounts","setNoAccounts","getAllAccounts","get","then","response","data","filter","element","customer_id","console","log","catch","err","renderAccounts","map","account","index","address","city","state","zip_code","solar_farm_id","capacity_share","created_date","id","setTimeout"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useLayoutEffect} from \"react\";\nimport http from \"../../utils/http-common\";\nimport Account from \"../Main/Accounts/Account\";\nimport { CustomerContext } from \"../../utils/CustomerContext\";\nimport \"../Main/main.css\";\n\nconst CustomerAccounts = () => {\n\n    const { globalCustomer } = useContext(CustomerContext);\n    const [accounts, setAccounts] = useState(null);\n    const [customerID, setCustomerID] = useState();\n    const [noAccounts, setNoAccounts] = useState(true);\n\n\n    function getAllAccounts() {\n      http\n        .get(\"/accounts\")\n        .then(function (response) {\n          let data = response.data.accounts.filter((element)=>{\n            if(element.customer_id == customerID) {\n              return element;\n            } \n          }\n          );\n          console.log(data);\n          setAccounts(data);\n        })\n        .catch(function (err) {\n          console.log(err);\n        });\n        \n    }\n\n    const renderAccounts = () => {\n      if(noAccounts) {\n        return <Account\n                  customer_id={\"0\"}\n                  address={\"address\"}\n                  city={\"city\"}\n                  state={\"state\"}\n                  zip_code={\"zip code\"}\n                  solar_farm_id={\"solar farm id\"}\n                  capacity_share={\"capacity share\"}\n                  created_date={\"created date\"}\n                />\n      } else {\n        return accounts &&\n                accounts.map((account, index) => {\n                  return (\n                    <Account\n                      key={index}\n                      customer_id={account.customer_id}\n                      address={account.address}\n                      city={account.city}\n                      state={account.state}\n                      zip_code={account.zip_code}\n                      solar_farm_id={account.solar_farm_id}\n                      capacity_share={account.capacity_share}\n                      created_date={account.created_date}\n                    />\n                  );\n                })\n      }\n    }\n\n    useEffect(() => {\n        (globalCustomer && setCustomerID(globalCustomer.id))\n        console.log(customerID);        \n    }, [globalCustomer, customerID])\n    \n\n    useLayoutEffect(() => {\n        setTimeout(() => {\n          getAllAccounts();\n        }, 550);\n    }, [globalCustomer, customerID]);\n\n    \n\n    return (\n      <>\n        <div className=\"container\">\n          <h2>Customer's Accounts:</h2>\n          <table>\n            <thead>\n              <tr>\n                <th>Customer ID</th>\n                <th>Address</th>\n                <th>City</th>\n                <th>State</th>\n                <th>Zip Code</th>\n                <th>Solar Farm ID</th>\n                <th>Capacity Share</th>\n                <th>Created On</th>\n              </tr>\n            </thead>\n            <tbody>\n              {renderAccounts()}\n              {/* {noAccounts && (\n                <Account\n                  customer_id={\"0\"}\n                  address={\"address\"}\n                  city={\"city\"}\n                  state={\"state\"}\n                  zip_code={\"zip code\"}\n                  solar_farm_id={\"solar farm id\"}\n                  capacity_share={\"capacity share\"}\n                  created_date={\"created date\"}\n                />\n              )}\n              {accounts &&\n                accounts.map((account, index) => {\n                  return (\n                    <Account\n                      key={index}\n                      customer_id={account.customer_id}\n                      address={account.address}\n                      city={account.city}\n                      state={account.state}\n                      zip_code={account.zip_code}\n                      solar_farm_id={account.solar_farm_id}\n                      capacity_share={account.capacity_share}\n                      created_date={account.created_date}\n                    />\n                  );\n                })} */}\n            </tbody>\n          </table>\n        </div>\n      </>\n    );\n\n}\n\nexport default CustomerAccounts;"]},"metadata":{},"sourceType":"module"}