{"ast":null,"code":"var _jsxFileName = \"/Users/joeldelatte/portfolioProjects/solsticeAssessment/solstice/client/src/components/Dashboard/CustomerAccounts.js\";\nimport React, { useContext, useState, useEffect, useLayoutEffect } from \"react\";\nimport http from \"../../utils/http-common\";\nimport Account from \"../Main/Accounts/Account\";\nimport { CustomerContext } from \"../../utils/CustomerContext\";\nimport \"../Main/main.css\";\n\nconst CustomerAccounts = () => {\n  const {\n    globalCustomer\n  } = useContext(CustomerContext);\n  const [accounts, setAccounts] = useState([{\n    id: 0,\n    customer_id: 0,\n    address: \"\",\n    city: \"\",\n    state: \"\",\n    zip_code: \"\",\n    solar_farm_id: 0,\n    capacity_share: 0,\n    created_date: \"\"\n  }]);\n  const [customerID, setCustomerID] = useState();\n\n  function getAllAccounts() {\n    let noData = [{\n      id: 0,\n      customer_id: 0,\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      zip_code: \"\",\n      solar_farm_id: 0,\n      capacity_share: 0,\n      created_date: \"\"\n    }];\n    http.get(\"/accounts\").then(function (response) {\n      let data = response.data.accounts.filter(element => {\n        if (element.customer_id == customerID) {\n          return element;\n        } else {\n          return noData;\n        }\n      });\n      console.log(data);\n      setAccounts(data);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }\n\n  useEffect(() => {\n    globalCustomer && setCustomerID(globalCustomer.id);\n    console.log(customerID);\n  }, [globalCustomer, customerID]);\n  useLayoutEffect(() => {\n    setTimeout(() => {\n      getAllAccounts();\n    }, 550);\n  }, [globalCustomer, customerID]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"Customer's Accounts:\"), /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, \"Customer ID\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, \"Address\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, \"City\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, \"State\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, \"Zip Code\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, \"Solar Farm ID\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, \"Capacity Share\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, \"Created On\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, accounts.customer_id !== customerID && /*#__PURE__*/React.createElement(Account, {\n    customer_id: \"no accounts match\",\n    address: \"address\",\n    city: \"city\",\n    state: \"state\",\n    zip_code: \"zip code\",\n    solar_farm_id: \"solar farm id\",\n    capacity_share: \"capacity share\",\n    created_date: \"created date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }), accounts && accounts.map((account, index) => {\n    return /*#__PURE__*/React.createElement(Account, {\n      key: index,\n      customer_id: account.customer_id,\n      address: account.address,\n      city: account.city,\n      state: account.state,\n      zip_code: account.zip_code,\n      solar_farm_id: account.solar_farm_id,\n      capacity_share: account.capacity_share,\n      created_date: account.created_date,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    });\n  })))));\n};\n\nexport default CustomerAccounts;","map":{"version":3,"sources":["/Users/joeldelatte/portfolioProjects/solsticeAssessment/solstice/client/src/components/Dashboard/CustomerAccounts.js"],"names":["React","useContext","useState","useEffect","useLayoutEffect","http","Account","CustomerContext","CustomerAccounts","globalCustomer","accounts","setAccounts","id","customer_id","address","city","state","zip_code","solar_farm_id","capacity_share","created_date","customerID","setCustomerID","getAllAccounts","noData","get","then","response","data","filter","element","console","log","catch","err","setTimeout","map","account","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,EAAiDC,eAAjD,QAAuE,OAAvE;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,OAAO,kBAAP;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAE3B,QAAM;AAAEC,IAAAA;AAAF,MAAqBR,UAAU,CAACM,eAAD,CAArC;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,CAAC;AACxCU,IAAAA,EAAE,EAAE,CADoC;AAExCC,IAAAA,WAAW,EAAE,CAF2B;AAGxCC,IAAAA,OAAO,EAAE,EAH+B;AAIxCC,IAAAA,IAAI,EAAE,EAJkC;AAKxCC,IAAAA,KAAK,EAAE,EALiC;AAMxCC,IAAAA,QAAQ,EAAE,EAN8B;AAOxCC,IAAAA,aAAa,EAAE,CAPyB;AAQxCC,IAAAA,cAAc,EAAE,CARwB;AASxCC,IAAAA,YAAY,EAAE;AAT0B,GAAD,CAAD,CAAxC;AAWA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,EAA5C;;AAGA,WAASqB,cAAT,GAA0B;AACxB,QAAIC,MAAM,GAAG,CACX;AACEZ,MAAAA,EAAE,EAAE,CADN;AAEEC,MAAAA,WAAW,EAAE,CAFf;AAGEC,MAAAA,OAAO,EAAE,EAHX;AAIEC,MAAAA,IAAI,EAAE,EAJR;AAKEC,MAAAA,KAAK,EAAE,EALT;AAMEC,MAAAA,QAAQ,EAAE,EANZ;AAOEC,MAAAA,aAAa,EAAE,CAPjB;AAQEC,MAAAA,cAAc,EAAE,CARlB;AASEC,MAAAA,YAAY,EAAE;AAThB,KADW,CAAb;AAaAf,IAAAA,IAAI,CACDoB,GADH,CACO,WADP,EAEGC,IAFH,CAEQ,UAAUC,QAAV,EAAoB;AACxB,UAAIC,IAAI,GAAGD,QAAQ,CAACC,IAAT,CAAclB,QAAd,CAAuBmB,MAAvB,CAA+BC,OAAD,IAAW;AAClD,YAAGA,OAAO,CAACjB,WAAR,IAAuBQ,UAA1B,EAAsC;AACnC,iBAAOS,OAAP;AACF,SAFD,MAEO;AAAE,iBAAON,MAAP;AAAc;AACxB,OAJU,CAAX;AAMAO,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAjB,MAAAA,WAAW,CAACiB,IAAD,CAAX;AACD,KAXH,EAYGK,KAZH,CAYS,UAAUC,GAAV,EAAe;AACpBH,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,KAdH;AAeD;;AAGD/B,EAAAA,SAAS,CAAC,MAAM;AACXM,IAAAA,cAAc,IAAIa,aAAa,CAACb,cAAc,CAACG,EAAhB,CAAhC;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAYX,UAAZ;AACH,GAHQ,EAGN,CAACZ,cAAD,EAAiBY,UAAjB,CAHM,CAAT;AAMAjB,EAAAA,eAAe,CAAC,MAAM;AAClB+B,IAAAA,UAAU,CAAC,MAAM;AACfZ,MAAAA,cAAc;AACf,KAFS,EAEP,GAFO,CAAV;AAGH,GAJc,EAIZ,CAACd,cAAD,EAAiBY,UAAjB,CAJY,CAAf;AAQA,sBACE,uDACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARF,CADF,CADF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,QAAQ,CAACG,WAAT,KAAyBQ,UAAzB,iBACC,oBAAC,OAAD;AACE,IAAA,WAAW,EAAE,mBADf;AAEE,IAAA,OAAO,EAAE,SAFX;AAGE,IAAA,IAAI,EAAE,MAHR;AAIE,IAAA,KAAK,EAAE,OAJT;AAKE,IAAA,QAAQ,EAAE,UALZ;AAME,IAAA,aAAa,EAAE,eANjB;AAOE,IAAA,cAAc,EAAE,gBAPlB;AAQE,IAAA,YAAY,EAAE,cARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAaGX,QAAQ,IACPA,QAAQ,CAAC0B,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC/B,wBACE,oBAAC,OAAD;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,WAAW,EAAED,OAAO,CAACxB,WAFvB;AAGE,MAAA,OAAO,EAAEwB,OAAO,CAACvB,OAHnB;AAIE,MAAA,IAAI,EAAEuB,OAAO,CAACtB,IAJhB;AAKE,MAAA,KAAK,EAAEsB,OAAO,CAACrB,KALjB;AAME,MAAA,QAAQ,EAAEqB,OAAO,CAACpB,QANpB;AAOE,MAAA,aAAa,EAAEoB,OAAO,CAACnB,aAPzB;AAQE,MAAA,cAAc,EAAEmB,OAAO,CAAClB,cAR1B;AASE,MAAA,YAAY,EAAEkB,OAAO,CAACjB,YATxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAaD,GAdD,CAdJ,CAbF,CAFF,CADF,CADF;AAoDH,CAnHD;;AAqHA,eAAeZ,gBAAf","sourcesContent":["import React, { useContext, useState, useEffect, useLayoutEffect} from \"react\";\nimport http from \"../../utils/http-common\";\nimport Account from \"../Main/Accounts/Account\";\nimport { CustomerContext } from \"../../utils/CustomerContext\";\nimport \"../Main/main.css\";\n\nconst CustomerAccounts = () => {\n\n    const { globalCustomer } = useContext(CustomerContext);\n    const [accounts, setAccounts] = useState([{\n      id: 0,\n      customer_id: 0,\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      zip_code: \"\",\n      solar_farm_id: 0,\n      capacity_share: 0,\n      created_date: \"\"\n    }]);\n    const [customerID, setCustomerID] = useState();\n\n\n    function getAllAccounts() {\n      let noData = [\n        {\n          id: 0,\n          customer_id: 0,\n          address: \"\",\n          city: \"\",\n          state: \"\",\n          zip_code: \"\",\n          solar_farm_id: 0,\n          capacity_share: 0,\n          created_date: \"\",\n        },\n      ];\n      http\n        .get(\"/accounts\")\n        .then(function (response) {\n          let data = response.data.accounts.filter((element)=>{\n            if(element.customer_id == customerID) {\n               return element;\n            } else { return noData}\n          }\n          );\n          console.log(data);\n          setAccounts(data);\n        })\n        .catch(function (err) {\n          console.log(err);\n        });\n    }\n\n\n    useEffect(() => {\n        (globalCustomer && setCustomerID(globalCustomer.id))\n        console.log(customerID);        \n    }, [globalCustomer, customerID])\n    \n\n    useLayoutEffect(() => {\n        setTimeout(() => {\n          getAllAccounts();\n        }, 550);\n    }, [globalCustomer, customerID]);\n\n    \n\n    return (\n      <>\n        <div className=\"container\">\n          <h2>Customer's Accounts:</h2>\n          <table>\n            <thead>\n              <tr>\n                <th>Customer ID</th>\n                <th>Address</th>\n                <th>City</th>\n                <th>State</th>\n                <th>Zip Code</th>\n                <th>Solar Farm ID</th>\n                <th>Capacity Share</th>\n                <th>Created On</th>\n              </tr>\n            </thead>\n            <tbody>\n              {accounts.customer_id !== customerID && (\n                <Account\n                  customer_id={\"no accounts match\"}\n                  address={\"address\"}\n                  city={\"city\"}\n                  state={\"state\"}\n                  zip_code={\"zip code\"}\n                  solar_farm_id={\"solar farm id\"}\n                  capacity_share={\"capacity share\"}\n                  created_date={\"created date\"}\n                />\n              )}\n              {accounts &&\n                accounts.map((account, index) => {\n                  return (\n                    <Account\n                      key={index}\n                      customer_id={account.customer_id}\n                      address={account.address}\n                      city={account.city}\n                      state={account.state}\n                      zip_code={account.zip_code}\n                      solar_farm_id={account.solar_farm_id}\n                      capacity_share={account.capacity_share}\n                      created_date={account.created_date}\n                    />\n                  );\n                })}\n            </tbody>\n          </table>\n        </div>\n      </>\n    );\n\n}\n\nexport default CustomerAccounts;"]},"metadata":{},"sourceType":"module"}